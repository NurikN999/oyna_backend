{
    "openapi": "3.0.0",
    "info": {
        "title": "Oyna API Documentation",
        "version": "0.1"
    },
    "paths": {
        "/api/advertisings": {
            "get": {
                "tags": [
                    "Advertisings"
                ],
                "summary": "Get list of advertisings",
                "description": "Get list of advertisings",
                "operationId": "getAllAdvertisings",
                "responses": {
                    "200": {
                        "description": "List of advertisings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AdvertisingResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Advertisings"
                ],
                "summary": "Create advertising",
                "description": "Create advertising",
                "operationId": "storeAdvertising",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreAdvertisingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Advertising created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/AdvertisingResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/advertisings/{advertising}": {
            "get": {
                "tags": [
                    "Advertisings"
                ],
                "summary": "Get advertising by id",
                "description": "Get advertising by id",
                "operationId": "showAdvertising",
                "parameters": [
                    {
                        "name": "advertising",
                        "in": "path",
                        "description": "Advertising id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advertising retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/AdvertisingResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Advertisings"
                ],
                "summary": "Update advertising",
                "description": "Update advertising",
                "operationId": "deleteAdvertising",
                "parameters": [
                    {
                        "name": "advertising",
                        "in": "path",
                        "description": "Advertising id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreAdvertisingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Advertising updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Advertisings"
                ],
                "summary": "Update advertising",
                "description": "Update advertising",
                "operationId": "updateAdvertising",
                "parameters": [
                    {
                        "name": "advertising",
                        "in": "path",
                        "description": "Advertising id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreAdvertisingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Advertising updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/advertising/types": {
            "get": {
                "tags": [
                    "Advertising"
                ],
                "summary": "Get all advertising placement area types",
                "operationId": "16590b15da63baf5a40fa96e38eb4e4b",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AdvertisingPlacementAreaType"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/api/analytics": {
            "get": {
                "tags": [
                    "Analytics"
                ],
                "summary": "Get analytics data",
                "description": "Get analytics data. You can filter the data by category by adding the 'category' query parameter. You can also filter the data by date by adding the 'date_from_gte' and 'date_to_lte' query parameters.",
                "operationId": "getAnalytics",
                "parameters": [
                    {
                        "name": "category",
                        "in": "query",
                        "description": "The category to filter the analytics data by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date_from_gte",
                        "in": "query",
                        "description": "The start date to filter the analytics data by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "date_to_lte",
                        "in": "query",
                        "description": "The end date to filter the analytics data by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Analytics data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "description": "The analytics data",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "Register a new user, send a verification code via SMS, and return a message.",
                "operationId": "register",
                "requestBody": {
                    "description": "Input data format",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Мы отправили SMS с кодом подтверждения на ваш номер телефона 1234567890"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login an existing user",
                "description": "Login an existing user, send a verification code via SMS, and return a message.",
                "operationId": "login",
                "requestBody": {
                    "description": "Input data format",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Мы отправили SMS с кодом подтверждения на ваш номер телефона 1234567890"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout the authenticated user",
                "description": "Logout the authenticated user and return a message.",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/verify": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Verify a user's phone number",
                "description": "Verify a user's phone number using a code, log in or register the user, and return a token and user data.",
                "operationId": "verify",
                "requestBody": {
                    "description": "Input data format",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "phone_number": {
                                        "description": "The phone number of the user",
                                        "type": "string"
                                    },
                                    "code": {
                                        "description": "The verification code",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "example": {
                                "phone_number": "1234567890",
                                "code": "12345"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User logged in successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "token": {
                                                    "description": "The JWT token",
                                                    "type": "string"
                                                },
                                                "user": {
                                                    "$ref": "#/components/schemas/UserResource"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid verification code"
                    },
                    "404": {
                        "description": "Verification code not found"
                    }
                }
            }
        },
        "/banners": {
            "get": {
                "tags": [
                    "Banners"
                ],
                "summary": "Get a list of banners",
                "operationId": "aec31e661d8989001e3a0c5e3282c75d",
                "responses": {
                    "200": {
                        "description": "A paginated array of banners",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BannerResource"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "Banners"
                ],
                "summary": "Create a new banner",
                "operationId": "7d12fa34d64eee6536beb39d781529d5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreBannerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Banner created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BannerResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/banners/{banner}": {
            "get": {
                "tags": [
                    "Banners"
                ],
                "summary": "Get a banner",
                "operationId": "cb5cdda796e4e4af504120f69245118f",
                "parameters": [
                    {
                        "name": "banner",
                        "in": "path",
                        "description": "The ID of the banner",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The banner",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BannerResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Banner not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Banners"
                ],
                "summary": "Delete a banner",
                "operationId": "2d4ced29c27c6970ea4e8654c7f79f6b",
                "parameters": [
                    {
                        "name": "banner",
                        "in": "path",
                        "description": "The ID of the banner",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Banner deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Banner not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Banners"
                ],
                "summary": "Update a banner",
                "operationId": "5ca7f973b59006928242d7a84f5dbe97",
                "parameters": [
                    {
                        "name": "banner",
                        "in": "path",
                        "description": "The ID of the banner",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBannerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Banner updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BannerResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Banner not found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cities": {
            "get": {
                "tags": [
                    "City"
                ],
                "summary": "Get all cities",
                "operationId": "185d0aefb5fd6e9d4e5f1263e2734df4",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CityResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/cities/{city}": {
            "get": {
                "tags": [
                    "City"
                ],
                "summary": "Get city by id",
                "operationId": "30ae4a727d6f249244811a32f60aa319",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/CityResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/differences": {
            "get": {
                "tags": [
                    "Differences"
                ],
                "summary": "Get all differences",
                "operationId": "1a602ca2958694233dce3c91bb42f9fa",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DifferenceResource"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Differences"
                ],
                "summary": "Create a new difference",
                "operationId": "402409e0fc7d9d8773f0f39f3d1cb839",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreDifferenceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DifferenceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation Error"
                                        },
                                        "errors": {
                                            "properties": {
                                                "game_level": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "game_id": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "coordinates": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "images": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/differences/{id}": {
            "get": {
                "tags": [
                    "Differences"
                ],
                "summary": "Get a specific difference",
                "operationId": "dae3633427020031dc764a8c65a16ee9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DifferenceResource"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Differences"
                ],
                "summary": "Delete a specific difference",
                "operationId": "0d8e8e9c952b0e326a82cf0f897a7ca4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Differences"
                ],
                "summary": "Update a specific difference",
                "operationId": "daa39b97b3ec16d764d23cdb5a97d832",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDifferenceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DifferenceResource"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entertainments": {
            "get": {
                "tags": [
                    "Entertainments"
                ],
                "summary": "Get all entertainments",
                "description": "Get all entertainments",
                "operationId": "index",
                "responses": {
                    "200": {
                        "description": "Entertainments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EntertainmentResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Entertainments"
                ],
                "summary": "Store a newly created entertainment",
                "description": "Store a newly created entertainment",
                "operationId": "store",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "image",
                                    "city_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Entertainment name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Entertainment description"
                                    },
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": "1"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Entertainment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Entertainment created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/EntertainmentResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entertainments/{entertainment}": {
            "get": {
                "tags": [
                    "Entertainments"
                ],
                "summary": "Get entertainment by id",
                "description": "Get entertainment by id",
                "operationId": "show",
                "parameters": [
                    {
                        "name": "entertainment",
                        "in": "path",
                        "description": "Entertainment id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entertainment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/EntertainmentResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Entertainment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Entertainment not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Entertainments"
                ],
                "summary": "Delete entertainment by id",
                "description": "Delete entertainment by id",
                "operationId": "destroy",
                "parameters": [
                    {
                        "name": "entertainment",
                        "in": "path",
                        "description": "Entertainment id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entertainment deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Entertainment deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Entertainment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Entertainment not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Entertainments"
                ],
                "summary": "Update entertainment by id",
                "description": "Update entertainment by id",
                "operationId": "update",
                "parameters": [
                    {
                        "name": "entertainment",
                        "in": "path",
                        "description": "Entertainment id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "image",
                                    "city_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Entertainment name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Entertainment description"
                                    },
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": "1"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Entertainment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Entertainment updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/EntertainmentResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Entertainment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Entertainment not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entertainments/types": {
            "get": {
                "tags": [
                    "Entertainments"
                ],
                "summary": "Get all entertainment types",
                "description": "Get all entertainment types",
                "operationId": "types",
                "responses": {
                    "200": {
                        "description": "Entertainment types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EntertainmentType"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/games": {
            "get": {
                "tags": [
                    "Games"
                ],
                "summary": "Get a list of games",
                "description": "Get a paginated list of games",
                "operationId": "getGames",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GameResource"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/games/{id}": {
            "get": {
                "tags": [
                    "Games"
                ],
                "summary": "Get a specific game",
                "description": "Get a specific game by its id",
                "operationId": "getGameById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the game to return",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameResource"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/game/finish": {
            "post": {
                "tags": [
                    "Games"
                ],
                "summary": "Finish a game",
                "description": "Finish a game and cache the points. Returns a unique ID for retrieving the points later.",
                "operationId": "finishGame",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "points"
                                ],
                                "properties": {
                                    "points": {
                                        "description": "The points earned in the game",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Game finished successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "The response message",
                                            "type": "string"
                                        },
                                        "unique_id": {
                                            "description": "The unique ID for retrieving the points",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/hospitality-venues": {
            "get": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Get all hospitality venues",
                "description": "Get all hospitality venues",
                "operationId": "getHospitalityVenues",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/HospitalityVenueResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Create a new hospitality venue",
                "description": "Create a new hospitality venue",
                "operationId": "storeHospitalityAndVenue",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreHospitalityVenueRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Venue created successfully."
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/HospitalityVenueResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/hospitality-venues/{hospitalityVenueId}": {
            "get": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Get a hospitality venue",
                "description": "Get a hospitality venue",
                "operationId": "showHospitalityAndVenue",
                "parameters": [
                    {
                        "name": "hospitalityVenue",
                        "in": "path",
                        "description": "ID of the hospitality venue",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": "1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/HospitalityVenueResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Update a hospitality venue",
                "description": "Update a hospitality venue",
                "operationId": "updateHospitalityAndVenue",
                "parameters": [
                    {
                        "name": "hospitalityVenue",
                        "in": "path",
                        "description": "ID of the hospitality venue",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": "1"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateHospitalityVenue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Venue updated successfully."
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/HospitalityVenueResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Delete a hospitality venue",
                "description": "Delete a hospitality venue",
                "operationId": "deleteHospitalityAndVenue",
                "parameters": [
                    {
                        "name": "hospitalityVenue",
                        "in": "path",
                        "description": "ID of the hospitality venue",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": "1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Venue deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/hospitality-venues/types": {
            "get": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Get all hospitality venue types",
                "description": "Get all hospitality venue types",
                "operationId": "getHospitalityVenueTypes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": "1"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Hotel"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/hospitality-venues/{hospitalityVenueId}/qr-code": {
            "get": {
                "tags": [
                    "Hospitality Venues"
                ],
                "summary": "Get a QR code for a specific hospitality venue",
                "description": "Generate a QR code based on the address of the specified hospitality venue. The QR code is returned as a data URI in a JSON response.",
                "operationId": "showQrCode",
                "parameters": [
                    {
                        "name": "hospitalityVenueId",
                        "in": "path",
                        "description": "The ID of the hospitality venue for which to generate the QR code",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "qr_code": {
                                            "description": "The QR code as a data URI",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Hospitality venue not found"
                    }
                }
            }
        },
        "/api/musics": {
            "get": {
                "tags": [
                    "Music"
                ],
                "summary": "Get all music",
                "description": "Get all music. You can filter the music by genre by adding the 'genre' query parameter.",
                "operationId": "getMusic",
                "parameters": [
                    {
                        "name": "genre",
                        "in": "query",
                        "description": "The genre to filter the music by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MusicResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Music"
                ],
                "summary": "Create a new music",
                "description": "Create a new music and return the music data",
                "operationId": "storeMusic",
                "requestBody": {
                    "description": "Data for creating a new music",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreMusicRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Music created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Music created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/MusicResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Bad request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/musics/{id}": {
            "get": {
                "tags": [
                    "Music"
                ],
                "summary": "Get a specific music",
                "description": "Get a specific music by its id",
                "operationId": "getMusicById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the music to return",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MusicResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Music"
                ],
                "summary": "Update a specific music",
                "description": "Update a specific music by its id",
                "operationId": "updateMusic",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the music to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Data for updating a music",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMusicRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Music updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MusicResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Music"
                ],
                "summary": "Delete a specific music",
                "description": "Delete a specific music by its id",
                "operationId": "deleteMusic",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the music to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Music deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/musics/genres": {
            "get": {
                "tags": [
                    "Music"
                ],
                "summary": "Get all music genres",
                "description": "Get all music genres",
                "operationId": "getMusicGenres",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MusicGenreType"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/offers": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "Get offers",
                "description": "Get offers",
                "operationId": "showAllOffers",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OfferResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Offers"
                ],
                "summary": "Create a new offer",
                "description": "Create a new offer and return the offer data",
                "operationId": "storeOffer",
                "requestBody": {
                    "description": "Data for creating a new offer",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Offer created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OfferResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/offers/{id}": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "Get a specific offer",
                "description": "Get a specific offer by its id",
                "operationId": "getOfferById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the offer to return",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OfferResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Offers"
                ],
                "summary": "Update a specific offer",
                "description": "Update a specific offer by its id",
                "operationId": "updateOffer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the offer to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Data for updating an offer",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Offer updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OfferResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Offers"
                ],
                "summary": "Delete a specific offer",
                "description": "Delete a specific offer by its id",
                "operationId": "deleteOffer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the offer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Offer deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Offer deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/partners": {
            "get": {
                "tags": [
                    "Partners"
                ],
                "summary": "Get all partners",
                "description": "Get all partners",
                "operationId": "getPartners",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PartnersResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Partners"
                ],
                "summary": "Create a new partner",
                "description": "Create a new partner and return the partner data",
                "operationId": "storePartner",
                "requestBody": {
                    "description": "Data for creating a new partner",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePartnerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Partner created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartnersResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/partners/{id}": {
            "get": {
                "tags": [
                    "Partners"
                ],
                "summary": "Get a specific partner",
                "description": "Get a specific partner by its id",
                "operationId": "getPartnerById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the partner to return",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartnersResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Partners"
                ],
                "summary": "Update a specific partner",
                "description": "Update a specific partner by its id",
                "operationId": "updatePartner",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the partner to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Data for updating a partner",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePartnerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Partner updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartnersResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Partners"
                ],
                "summary": "Delete a specific partner",
                "description": "Delete a specific partner by its id",
                "operationId": "deletePartner",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the partner to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Partner deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Partner deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/prizes": {
            "get": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Get all prizes",
                "description": "Get all prizes",
                "operationId": "getPrizes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PrizeResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Create a new prize",
                "description": "Create a new prize and return the prize data",
                "operationId": "storePrize",
                "requestBody": {
                    "description": "Data for creating a new prize",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePrizeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Prize created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrizeResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/prizes/{id}": {
            "get": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Get a specific prize",
                "description": "Get a specific prize by its id",
                "operationId": "getPrizeById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the prize to return",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrizeResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Update a specific prize",
                "description": "Update a specific prize by its id",
                "operationId": "updatePrize",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the prize to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Data for updating a prize",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePrizeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Prize updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrizeResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Prizes"
                ],
                "summary": "Delete a specific prize",
                "description": "Delete a specific prize by its id",
                "operationId": "deletePrize",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the prize to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prize deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Prize deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/quiz-questions": {
            "get": {
                "tags": [
                    "QuizQuestions"
                ],
                "summary": "Get a list of quiz questions",
                "description": "Get a paginated list of quiz questions",
                "operationId": "getQuizQuestions",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QuizQuestionResource"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "QuizQuestions"
                ],
                "summary": "Create a new quiz question",
                "description": "Create a new quiz question and its options",
                "operationId": "storeQuizQuestion",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreQuizQuestion"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizQuestionResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/quiz-questions/{quizQuestion}": {
            "get": {
                "tags": [
                    "QuizQuestions"
                ],
                "summary": "Get a quiz question",
                "description": "Get a quiz question by ID",
                "operationId": "getQuizQuestion",
                "parameters": [
                    {
                        "name": "quizQuestion",
                        "in": "path",
                        "description": "The ID of the quiz question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizQuestionResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "QuizQuestions"
                ],
                "summary": "Delete a quiz question",
                "description": "Delete a quiz question by ID",
                "operationId": "deleteQuizQuestion",
                "parameters": [
                    {
                        "name": "quizQuestion",
                        "in": "path",
                        "description": "The ID of the quiz question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "QuizQuestions"
                ],
                "summary": "Update a quiz question",
                "description": "Update a quiz question and its options",
                "operationId": "updateQuizQuestion",
                "parameters": [
                    {
                        "name": "quizQuestion",
                        "in": "path",
                        "description": "The ID of the quiz question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateQuizQuestionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizQuestionResource"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "description": "Get all users. You can filter users who have prizes by adding the 'has_prizes' query parameter. Set it to 'true' to get users who have prizes, and 'false' to get users who don't have prizes.",
                "operationId": "getAllUsers",
                "parameters": [
                    {
                        "name": "has_prizes",
                        "in": "query",
                        "description": "Whether the user has prizes or not",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is_taxi_driver",
                        "in": "query",
                        "description": "Whether the user taxi driver or not",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by id",
                "description": "Get user by id",
                "operationId": "showUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete user by id",
                "description": "Delete user by id",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user by id",
                "description": "Update user by id",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/{userId}/trade": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Trade user points for a prize",
                "description": "Trade a specified number of user points for a prize. Returns the updated user data.",
                "operationId": "tradePointsToPrize",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "points"
                                ],
                                "properties": {
                                    "points": {
                                        "description": "The number of points to trade",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Points traded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "The response message",
                                            "type": "string"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/leaderboard": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get top 4 users with the highest points balance",
                "operationId": "e5e0e937bab0b2d8bac4c0d1634b9b69",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LeaderboardResource"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AdvertisingPlacementAreaType": {
                "properties": {
                    "id": {
                        "description": "The value of the advertising placement area type",
                        "type": "string",
                        "example": "home_page"
                    },
                    "name": {
                        "description": "The title of the advertising placement area type",
                        "type": "string",
                        "example": "Главная страница"
                    }
                },
                "type": "object",
                "enum": [
                    "HOME_PAGE",
                    "SIDE_PANEL",
                    "AFTER_OYNA_BUTTON"
                ]
            },
            "EntertainmentType": {
                "description": "The genre of the music",
                "type": "string",
                "enum": [
                    "game_center",
                    "cinema",
                    "theater",
                    "museum",
                    "park",
                    "anticafe"
                ]
            },
            "MusicGenreType": {
                "description": "The genre of the music",
                "type": "string",
                "enum": [
                    "pop",
                    "kazakh",
                    "jazz",
                    "classic",
                    "country",
                    "funny"
                ]
            },
            "StoreAdvertisingRequest": {
                "required": [
                    "title",
                    "placement_area",
                    "play_time",
                    "description",
                    "video"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Advertising title"
                    },
                    "placement_area": {
                        "type": "string",
                        "example": "Advertising placement area"
                    },
                    "play_time": {
                        "type": "string",
                        "format": "date",
                        "example": "2021-10-10"
                    },
                    "description": {
                        "type": "string",
                        "example": "Advertising description"
                    },
                    "video": {
                        "type": "string",
                        "format": "binary"
                    },
                    "video_link": {
                        "type": "string",
                        "example": "http://example.com/video.mp4"
                    }
                },
                "type": "object"
            },
            "UpdateAdvertisingRequest": {
                "title": "UpdateAdvertisingRequest",
                "description": "Update advertising request",
                "required": [
                    "title",
                    "placement_area",
                    "play_time",
                    "description",
                    "video",
                    "video_link"
                ]
            },
            "LoginRequest": {
                "required": [
                    "phone_number",
                    "unique_id"
                ],
                "properties": {
                    "phone_number": {
                        "description": "The phone_number address of the user",
                        "type": "string",
                        "format": "phone_number"
                    },
                    "unique_id": {
                        "description": "The unique_id of the user",
                        "type": "string",
                        "format": "unique_id"
                    }
                },
                "type": "object",
                "example": {
                    "phone_number": "+777777777",
                    "unique_id": "string"
                }
            },
            "RegisterRequest": {
                "required": [
                    "first_name",
                    "age",
                    "phone_number"
                ],
                "properties": {
                    "first_name": {
                        "description": "The first name of the user",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "age": {
                        "description": "The age of the user",
                        "type": "integer"
                    },
                    "phone_number": {
                        "description": "The phone number of the user",
                        "type": "string"
                    },
                    "interests": {
                        "description": "The interests of the user",
                        "type": "string"
                    },
                    "teams": {
                        "description": "The teams of the user",
                        "type": "string"
                    },
                    "city_id": {
                        "description": "The ID of the city of the user",
                        "type": "integer"
                    },
                    "unique_id": {
                        "description": "The unique ID of the user",
                        "type": "string"
                    },
                    "is_taxi_driver": {
                        "description": "Field if user taxi driver or not",
                        "type": "boolean"
                    }
                },
                "type": "object",
                "example": {
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john@example.com",
                    "age": 30,
                    "phone_number": "1234567890",
                    "interests": "coding,reading",
                    "teams": "team1,team2",
                    "city_id": 1,
                    "unique_id": "abc123"
                }
            },
            "StoreBannerRequest": {
                "required": [
                    "title",
                    "description",
                    "image"
                ],
                "properties": {
                    "title": {
                        "description": "The title of the banner",
                        "type": "string",
                        "example": "Sample Banner"
                    },
                    "description": {
                        "description": "The description of the banner",
                        "type": "string",
                        "example": "This is a sample banner"
                    },
                    "image": {
                        "description": "The image of the banner",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "UpdateBannerRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the banner",
                        "type": "string",
                        "example": "Updated Banner"
                    },
                    "description": {
                        "description": "The description of the banner",
                        "type": "string",
                        "example": "This is an updated banner"
                    },
                    "image": {
                        "description": "The updated image of the banner",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "StoreDifferenceRequest": {
                "required": [
                    "game_level",
                    "game_id",
                    "coordinates",
                    "images"
                ],
                "properties": {
                    "game_level": {
                        "description": "The level of the game",
                        "type": "string",
                        "example": "1"
                    },
                    "game_id": {
                        "description": "The ID of the game",
                        "type": "integer",
                        "example": 1
                    },
                    "coordinates": {
                        "description": "The coordinates of the difference",
                        "type": "array",
                        "items": {
                            "required": [
                                "x",
                                "y"
                            ],
                            "properties": {
                                "x": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 10.5
                                },
                                "y": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 20.5
                                }
                            },
                            "type": "object"
                        }
                    },
                    "images": {
                        "description": "The images of the difference",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateDifferenceRequest": {
                "required": [
                    "game_level",
                    "coordinates"
                ],
                "properties": {
                    "game_level": {
                        "description": "The level of the game",
                        "type": "string",
                        "example": "1"
                    },
                    "coordinates": {
                        "description": "The coordinates of the difference",
                        "type": "array",
                        "items": {
                            "required": [
                                "x",
                                "y"
                            ],
                            "properties": {
                                "x": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 10.5
                                },
                                "y": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 20.5
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "StoreHospitalityVenueRequest": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "city_id": {
                        "type": "integer"
                    },
                    "image": {
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "UpdateHospitalityVenue": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "city_id": {
                        "type": "integer"
                    },
                    "image": {
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "StoreMusicRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the music",
                        "type": "string"
                    },
                    "genre": {
                        "description": "The genre of the music",
                        "type": "string",
                        "enum": [
                            "pop",
                            "rock",
                            "jazz",
                            "classical",
                            "country"
                        ]
                    },
                    "image": {
                        "description": "The image of the music",
                        "type": "string",
                        "format": "binary"
                    },
                    "file": {
                        "description": "The file of the music",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "UpdateMusicRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the music",
                        "type": "string"
                    },
                    "genre": {
                        "description": "The genre of the music",
                        "type": "string",
                        "enum": [
                            "pop",
                            "rock",
                            "jazz",
                            "classical",
                            "country"
                        ]
                    },
                    "image": {
                        "description": "The image of the music",
                        "type": "string",
                        "format": "binary"
                    },
                    "file": {
                        "description": "The file of the music",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "StorePartnerRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the partner",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the partner",
                        "type": "string"
                    },
                    "image": {
                        "description": "The image of the partner",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "UpdatePartnerRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the partner",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the partner",
                        "type": "string"
                    },
                    "image": {
                        "description": "The image of the partner",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "StorePrizeRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the prize",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the prize",
                        "type": "string"
                    },
                    "point_amount": {
                        "description": "Point amount of the prize",
                        "type": "integer"
                    },
                    "image": {
                        "description": "The image of the prize",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "UpdatePrizeRequest": {
                "properties": {
                    "title": {
                        "description": "The title of the prize",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the prize",
                        "type": "string"
                    },
                    "point_amount": {
                        "description": "Point amount of the prize",
                        "type": "integer"
                    },
                    "image": {
                        "description": "The image of the prize",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "StoreQuizQuestion": {
                "title": "StoreQuizQuestion",
                "required": [
                    "text",
                    "options"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "What is the capital of France?"
                    },
                    "image": {
                        "type": "string",
                        "format": "binary"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "text": {
                                    "type": "string",
                                    "example": "Paris"
                                },
                                "is_correct": {
                                    "type": "boolean",
                                    "example": true
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateQuizQuestionRequest": {
                "title": "UpdateQuizQuestionRequest",
                "required": [
                    "text",
                    "options"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "What is the capital of France?"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "text": {
                                    "type": "string",
                                    "example": "Paris"
                                },
                                "is_correct": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "image": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "TradePrizeRequest": {
                "required": [
                    "points",
                    "prize_id",
                    "city_id",
                    "address"
                ],
                "properties": {
                    "points": {
                        "description": "The number of points to trade",
                        "type": "integer"
                    },
                    "prize_id": {
                        "description": "The ID of the prize",
                        "type": "integer"
                    },
                    "city_id": {
                        "description": "The ID of the city",
                        "type": "integer"
                    },
                    "address": {
                        "description": "The address for the prize delivery",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateUserRequest": {
                "title": "UpdateUserRequest",
                "required": [
                    "first_name",
                    "last_name",
                    "email",
                    "age",
                    "interest",
                    "teams",
                    "city_id",
                    "password"
                ],
                "properties": {
                    "first_name": {
                        "description": "User first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "User last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User email",
                        "type": "string"
                    },
                    "age": {
                        "description": "User age",
                        "type": "integer"
                    },
                    "interest": {
                        "description": "User interests",
                        "type": "string"
                    },
                    "teams": {
                        "description": "User teams",
                        "type": "string"
                    },
                    "city_id": {
                        "description": "City id",
                        "type": "integer"
                    },
                    "password": {
                        "description": "User password",
                        "type": "string"
                    },
                    "image": {
                        "description": "User image",
                        "type": "binary"
                    }
                },
                "type": "object"
            },
            "AdvertisingResource": {
                "title": "AdvertisingResource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "title": {
                        "type": "string",
                        "example": "Advertising title"
                    },
                    "placement_area": {
                        "type": "string",
                        "example": "Placement area"
                    },
                    "play_time": {
                        "type": "integer",
                        "example": "30"
                    },
                    "description": {
                        "type": "string",
                        "example": "Advertising description"
                    },
                    "video_path": {
                        "type": "string",
                        "example": "http://oynapp.kz/storage/videos/1.mp4"
                    }
                },
                "type": "object"
            },
            "BannerResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the banner",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "The title of the banner",
                        "type": "string",
                        "example": "Sample Banner"
                    },
                    "description": {
                        "description": "The description of the banner",
                        "type": "string",
                        "example": "This is a sample banner"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "type": "object"
            },
            "CityResource": {
                "title": "CityResource",
                "description": "City resource",
                "properties": {
                    "id": {
                        "description": "City id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "City name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CityResourceCollection": {
                "title": "CityResourceCollection",
                "description": "City resource collection",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CityResource"
                        }
                    }
                },
                "type": "object"
            },
            "CoordinateResource": {
                "properties": {
                    "x1": {
                        "description": "The x1 coordinate",
                        "type": "integer",
                        "example": 10
                    },
                    "y1": {
                        "description": "The y1 coordinate",
                        "type": "integer",
                        "example": 20
                    },
                    "x2": {
                        "description": "The x2 coordinate",
                        "type": "integer",
                        "example": 30
                    },
                    "y2": {
                        "description": "The y2 coordinate",
                        "type": "integer",
                        "example": 40
                    }
                },
                "type": "object"
            },
            "DifferenceResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the difference",
                        "type": "integer",
                        "example": 1
                    },
                    "game_level": {
                        "description": "The level of the game",
                        "type": "integer",
                        "example": 1
                    },
                    "game_id": {
                        "description": "The ID of the game",
                        "type": "integer",
                        "example": 1
                    },
                    "coordinates": {
                        "description": "The coordinates of the difference",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CoordinateResource"
                        }
                    },
                    "images": {
                        "description": "The images of the difference",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImageResource"
                        }
                    }
                },
                "type": "object"
            },
            "EntertainmentResource": {
                "required": [
                    "id",
                    "type",
                    "title",
                    "address",
                    "description",
                    "city_id",
                    "image"
                ],
                "properties": {
                    "id": {
                        "description": "Transform the resource into an array.",
                        "type": "integer",
                        "example": "1"
                    },
                    "type": {
                        "type": "string",
                        "example": "Entertainment"
                    },
                    "title": {
                        "type": "string",
                        "example": "Entertainment title"
                    },
                    "address": {
                        "type": "string",
                        "example": "Entertainment address"
                    },
                    "description": {
                        "type": "string",
                        "example": "Entertainment description"
                    },
                    "city_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "type": "object"
            },
            "GameResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the game",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "type": {
                        "description": "The type of the game",
                        "type": "string",
                        "example": "Quiz"
                    },
                    "quiz": {
                        "$ref": "#/components/schemas/QuizQuestionResource"
                    },
                    "difference": {
                        "$ref": "#/components/schemas/DifferenceResource"
                    }
                },
                "type": "object"
            },
            "GameResourceCollection": {
                "description": "A collection of games",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/GameResource"
                }
            },
            "HospitalityVenueResource": {
                "required": [
                    "id",
                    "title",
                    "type",
                    "address",
                    "description",
                    "city",
                    "image"
                ],
                "properties": {
                    "id": {
                        "description": "Transform the resource into an array.",
                        "type": "integer",
                        "example": "1"
                    },
                    "title": {
                        "type": "string",
                        "example": "Hospitality Venue title"
                    },
                    "type": {
                        "type": "string",
                        "example": "Hospitality Venue type"
                    },
                    "address": {
                        "type": "string",
                        "example": "Hospitality Venue address"
                    },
                    "description": {
                        "type": "string",
                        "example": "Hospitality Venue description"
                    },
                    "city": {
                        "$ref": "#/components/schemas/CityResource"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "type": "object"
            },
            "ImageResource": {
                "required": [
                    "id",
                    "path",
                    "imageable_type",
                    "imageable_id"
                ],
                "properties": {
                    "id": {
                        "description": "Transform the resource into an array.",
                        "type": "integer",
                        "example": "1"
                    },
                    "path": {
                        "type": "string",
                        "example": "images/1.jpg"
                    },
                    "imageable_type": {
                        "type": "string",
                        "example": "App\\Models\\Entertainment"
                    },
                    "imageable_id": {
                        "type": "integer",
                        "example": "1"
                    }
                },
                "type": "object"
            },
            "LeaderboardResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the user",
                        "type": "integer",
                        "example": 1
                    },
                    "first_name": {
                        "description": "The first name of the user",
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "description": "The last name of the user",
                        "type": "string",
                        "example": "Doe"
                    },
                    "points": {
                        "description": "The points balance of the user",
                        "type": "integer",
                        "example": 100
                    }
                },
                "type": "object"
            },
            "MusicResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the music",
                        "type": "integer"
                    },
                    "title": {
                        "description": "The title of the music",
                        "type": "string"
                    },
                    "genre": {
                        "description": "The genre of the music",
                        "type": "string"
                    },
                    "path": {
                        "description": "The URL of the music file",
                        "type": "string"
                    },
                    "image": {
                        "description": "The image of the music",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OfferResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the offer",
                        "type": "integer"
                    },
                    "text": {
                        "description": "The text of the offer",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OptionResource": {
                "required": [
                    "id",
                    "text",
                    "is_correct",
                    "quiz_question_id",
                    "image"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "text": {
                        "type": "string",
                        "example": "Option 1"
                    },
                    "is_correct": {
                        "type": "boolean",
                        "example": "true"
                    },
                    "quiz_question_id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "type": "object"
            },
            "PartnersResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the partner",
                        "type": "integer"
                    },
                    "title": {
                        "description": "The title of the partner",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the partner",
                        "type": "string"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "type": "object"
            },
            "PrizeResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the prize",
                        "type": "integer"
                    },
                    "title": {
                        "description": "The title of the prize",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the prize",
                        "type": "string"
                    },
                    "point_amount": {
                        "description": "Point amount of the prize",
                        "type": "integer"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "type": "object"
            },
            "QuizQuestionResource": {
                "properties": {
                    "id": {
                        "description": "The ID of the quiz question",
                        "type": "integer",
                        "example": 1
                    },
                    "text": {
                        "description": "The text of the quiz question",
                        "type": "string",
                        "example": "What is the capital of France?"
                    },
                    "quiz_id": {
                        "description": "The ID of the quiz that the question belongs to",
                        "type": "integer",
                        "example": 1
                    },
                    "options": {
                        "description": "The options of the quiz question",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OptionResource"
                        }
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "title": "UserResource",
                "properties": {
                    "id": {
                        "description": "User id",
                        "type": "integer"
                    },
                    "first_name": {
                        "description": "User first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "User last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User email",
                        "type": "string"
                    },
                    "age": {
                        "description": "User age",
                        "type": "integer"
                    },
                    "interests": {
                        "description": "User interests",
                        "type": "string"
                    },
                    "teams": {
                        "description": "User teams",
                        "type": "string"
                    },
                    "is_active": {
                        "description": "User is active",
                        "type": "boolean"
                    },
                    "city": {
                        "$ref": "#/components/schemas/CityResource"
                    },
                    "image": {
                        "$ref": "#/components/schemas/ImageResource"
                    },
                    "created_at": {
                        "description": "User created at",
                        "type": "string"
                    },
                    "points": {
                        "description": "User points",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}